import sbtzerocice.{ZeroCIcePlugin=>Ice}
import scalariform.formatter.preferences._
import sbtprotobuf.{ProtobufPlugin=>PB}
Seq(PB.protobufSettings: _*)

// Disable scala!
crossPaths := false
autoScalaLibrary := false

packSettings

patchPack

packMain := Map("cuebot" -> "com.imageworks.spcue.CuebotApplication")

packGenerateWindowsBatFile := false

packExcludeJars := Seq("scala-compiler-.*\\.jar")

packJvmOpts := Map("cuebot" -> Seq(
    "-server",
    "-Xms3g",
    "-Xmx3g",
    "-XX:MaxDirectMemorySize=9223372036854775807",
    "-Dnet.spy.log.LoggerImpl=net.spy.log.Log4JLogger",
    "-Dhttp.proxyHost=proxy.spimageworks.com",
    "-Dhttp.proxyPort=8080",
    "-Dhttps.proxyHost=proxy.spimageworks.com",
    "-Dhttps.proxyPort=8080",
    "-Djava.net.preferIPv4Stack=true",
    // Garbage collection logging.
    "-verbose:gc",
    "-XX:+PrintGCDateStamps",
    "-XX:+PrintGCDetails",
    "-XX:+PrintGCTimeStamps",
    "-XX:+PrintHeapAtGC",
    "-XX:+PrintTenuringDistribution",
    "-Xloggc:${PROG_HOME}/logs/gc.log",
    "-XX:+UseGCLogFileRotation",
    "-XX:NumberOfGCLogFiles=10",
    "-XX:GCLogFileSize=1M",
    // Garbage collection configuration.
    "-XX:+UseParNewGC",
    "-XX:+UseConcMarkSweepGC",
    "-XX:+CMSClassUnloadingEnabled",
    "-XX:CMSInitiatingOccupancyFraction=70",
    "-Djava.library.path=${LD_LIBRARY_PATH}",
    "-Doracle.net.tns_admin=${TNS_ADMIN}"
))

net.virtualvoid.sbt.graph.Plugin.graphSettings

genSliceSettings

scalariformSettings

ScalariformKeys.preferences := FormattingPreferences().
  setPreference(AlignParameters, true).
  setPreference(CompactControlReadability, true).
  setPreference(DoubleIndentClassDeclaration, true)

resolvers ++= Seq(
    "spymemcached" at "http://files.couchbase.com/maven2/",
    "zeroc" at "http://www.zeroc.com:8081/nexus/service/local/repositories/releases/content/",
    "SPI" at "file://" + baseDirectory.value + "/maven/",
)

{
  val activemq_ver = "5.12.0"
  // This should match the version spring_boot is trying to pull in.
  val spring_ver = "4.2.8.RELEASE"
  val spring_boot_ver = "1.3.8.RELEASE"
  libraryDependencies ++= Seq(
    "com.google.code.gson" % "gson" % "2.3.1",
    "com.google.guava" % "guava" % "12.0.1",
    "com.sun.mail" % "mailapi" % "1.5.4",
    "commons-lang" % "commons-lang" % "2.6",
    "com.zeroc" % "ice" % "3.6.2",
    "io.grpc" % "grpc-all" % "1.14.0",
    "org.apache.activemq" % "activemq-pool" % activemq_ver,
    "org.apache.velocity" % "velocity" % "1.7",
    "org.jdom" % "jdom" % "1.1.3",
    "org.springframework.boot" % "spring-boot-starter-jdbc" % spring_boot_ver exclude ("org.springframework.boot", "spring-boot-starter-logging"),
    "org.springframework.boot" % "spring-boot-starter-log4j" % spring_boot_ver,
    "org.springframework.boot" % "spring-boot-starter-tomcat" % spring_boot_ver % "provided",
    "org.springframework.boot" % "spring-boot-starter-web" % spring_boot_ver,
    "org.springframework" % "spring-context-support" % spring_ver,
    "org.springframework" % "spring-jms" % spring_ver,
    "org.quartz-scheduler" % "quartz" % "2.2.1" exclude ("c3p0", "c3p0"),
    "org.postgresql" % "postgresql" % "42.2.2",
//    "javax.inject" % "javax.inject" % "1",
//    "javax.servlet" % "javax.servlet-api" % "3.0.1" % "provided",
//    "javax.mail" % "javax.mail-api" % "1.5.4",
    "junit" % "junit" % "4.12" % "test",
    // https://github.com/sbt/junit-interface
    "com.novocode" % "junit-interface" % "0.11" % "test",
    "org.springframework.boot" % "spring-boot-starter-test" % spring_boot_ver % "test",
    "org.assertj" % "assertj-core" % "3.8.0" % "test",
  )
}

// gRPC config
version in PB.protobufConfig := "3.5.1"
protoc in PB.protobufConfig := PATH_PROTOC
sourceDirectory in PB.protobufConfig := baseDirectory.value / "src" / "main" / "proto"

protocOptions in PB.protobufConfig ++= Seq(
  "--grpc-java_out=" + baseDirectory.value + "/target/src_managed/main/compiled_protobuf"
)


// reduce the maximum number of errors shown by the Scala compiler
maxErrors := 5

// otherwise we get port conflicts in the tests
parallelExecution in Test := false

fork in Test := true

// increase warnings generated by the Scala compiler
scalacOptions ++= Seq(
    "-Xlint",
    "-Ywarn-dead-code",
    "-deprecation",
    "-feature",
    "-unchecked")

javacOptions ++= Seq(
    "-Xlint:deprecation",
    "-Xlint:unchecked")

// ask ScalaTest for full stack traces
// testOptions in Test += Tests.Argument("-oF")

// name the war file 'cuebot.war'
artifactName := { (config: sbt.ScalaVersion, module: ModuleID, artifact: Artifact) =>
    artifact.name + "." + artifact.extension
}

// Faster incremental compilation
incOptions := incOptions.value.withNameHashing(true)

deployTask := {
    "fab hot_redeploy:build=no" !
}

deployTask <<= deployTask.dependsOn(xerial.sbt.Pack.packArchiveTbz)
