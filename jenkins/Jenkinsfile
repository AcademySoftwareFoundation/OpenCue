pipeline {
    agent any
    environment {
        BUILD_ID = sh(script: "jenkins/generate_version_number.sh && cat ./VERSION", returnStdout: true).trim()
    }
    stages {
        stage('Clean') {
            steps {
                sh "rm build/* || true"
            }
        }
        stage('Build') {
            steps {
                sh "docker build --target build -t opencue/cuebot-build:${env.BUILD_ID} -f cuebot/Dockerfile ."
                sh "docker build --target build -t opencue/rqd-build:${env.BUILD_ID} -f rqd/Dockerfile ."
                sh "docker build --target build -t opencue/pycue-build:${env.BUILD_ID} -f pycue/Dockerfile ."
                sh "docker build --target build -t opencue/pyoutline-build:${env.BUILD_ID} -f pyoutline/Dockerfile ."
                sh "docker build --target build -t opencue/cuegui-build:${env.BUILD_ID} -f cuegui/Dockerfile --build-arg=upstream_version=${env.BUILD_ID} ."
                sh "docker build --target build -t opencue/cuesubmit-build:${env.BUILD_ID} -f cuesubmit/Dockerfile ."
            }
        }
        stage('Test') {
            steps {
                sh "docker build --target test -t opencue/cuebot-test:${env.BUILD_ID} -f cuebot/Dockerfile ."
                sh "docker build --target test -t opencue/rqd-test:${env.BUILD_ID} -f rqd/Dockerfile ."
                sh "docker build --target test -t opencue/pycue-test:${env.BUILD_ID} -f pycue/Dockerfile ."
                sh "docker build --target test -t opencue/pyoutline-test:${env.BUILD_ID} -f pyoutline/Dockerfile ."
                sh "docker build --target test -t opencue/cuegui-test:${env.BUILD_ID} -f cuegui/Dockerfile --build-arg=upstream_version=${env.BUILD_ID} ."
                sh "docker build --target test -t opencue/cuesubmit-test:${env.BUILD_ID} -f cuesubmit/Dockerfile ."
            }
        }
        stage('Package') {
            steps {
                sh "docker build -t opencue/cuebot:${env.BUILD_ID} -f cuebot/Dockerfile ."
                sh "docker build -t opencue/rqd:${env.BUILD_ID} -f rqd/Dockerfile ."
                sh "docker build -t opencue/pycue:${env.BUILD_ID} -f pycue/Dockerfile ."
                sh "docker build -t opencue/pyoutline:${env.BUILD_ID} -f pyoutline/Dockerfile ."
                sh "docker build -t opencue/cuegui:${env.BUILD_ID} -f cuegui/Dockerfile --build-arg=upstream_version=${env.BUILD_ID} ."
                sh "docker build -t opencue/cuesubmit:${env.BUILD_ID} -f cuesubmit/Dockerfile ."
                sh "jenkins/extract_artifacts.sh ${env.BUILD_ID} ./build"
            }
        }
        stage('Publish') {
            steps {
                sh "jenkins/publish_artifacts.sh ${env.BUILD_ID} ./build"
            }
        }
    }
    post {
        always {
            archiveArtifacts artifacts: 'build/cuebot-*-all.jar', fingerprint: true
            archiveArtifacts artifacts: 'build/rqd-*-all.tar.gz', fingerprint: true
            archiveArtifacts artifacts: 'build/pycue-*-all.tar.gz', fingerprint: true
            archiveArtifacts artifacts: 'build/pyoutline-*-all.tar.gz', fingerprint: true
            archiveArtifacts artifacts: 'build/cuegui-*-all.tar.gz', fingerprint: true
            archiveArtifacts artifacts: 'build/cuesubmit-*-all.tar.gz', fingerprint: true
        }
    }
}
