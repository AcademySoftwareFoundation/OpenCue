name: OpenCue Release Pipeline

# Trigger this pipeline when a commit is tagged with a version number, e.g. "v0.4.32".
#on:
#  push:
#    tags:
#      - 'v*'

on:
  push:
    branches: [ release-pipeline-s3 ]

jobs:
  # TODO(https://github.com/AcademySoftwareFoundation/OpenCue/issues/715) Add another job to
  #   release the Docker images.
  create_release:
    name: Create Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.S3_REGION }}
          role-to-assume: ${{ secrets.AWS_S3_ROLE }}
          role-duration-seconds: 1800

      - name: Set build ID
        run: |
          set -e
          ci/generate_version_number.sh > VERSION
          echo "Build ID: $(cat ./VERSION)"
          echo "::set-env name=BUILD_ID::$(cat ./VERSION)"

      #- name: Verify version number
      #  run: |
      #    set -e
      #    if [ "$(cat VERSION)" != "${GITHUB_REF}" ]; then
      #      echo "Version check failed: code version $(cat VERSION) does not match tag name ${GITHUB_REF}"
      #      exit 1
      #    fi

      - name: Fetch artifacts
        id: fetch_artifacts
        env:
          S3_BUCKET: ${{ secrets.S3_BUCKET }}
        run: |
          mkdir -p "${GITHUB_WORKSPACE}/artifacts/"
          aws s3 sync "s3://${S3_BUCKET}/opencue/${BUILD_ID}/" "${GITHUB_WORKSPACE}/artifacts/"
          echo "::set-output name=filenames::$(ls "${GITHUB_WORKSPACE}/artifacts/")"

      - name: List artifacts
        run: echo ${{ steps.fetch_artifacts.outputs.filenames }}

      - name: Generate release notes
        id: release_notes
        run: |
          last_tagged_version=$(git describe --tags $(git rev-list --tags --max-count=1))
          commits_since_last_release=$(git log --pretty="* %H %s" ${last_tagged_version}..HEAD)
          echo "::set-output name=commits::${commits_since_last_release}"

      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
          body: |
            To learn how to install and configure OpenCue, see our [Getting Started guide](https://www.opencue.io/docs/getting-started/).

            ## Changes:

            ${{ steps.release_notes.outputs.commits }}
          draft: true
          prerelease: false
