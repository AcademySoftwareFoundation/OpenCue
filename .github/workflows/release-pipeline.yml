name: OpenCue Release Pipeline

# Trigger this pipeline when a commit is tagged with a version number, e.g. "v0.4.32".
on:
  push:
    tags:
      - "v*"

jobs:
  build_opencue_packages:
    runs-on: ubuntu-22.04
    container: python:3.7
    name: "Build Python Packages"
    outputs:
      opencue_proto_path: ${{ steps.package_outputs.outputs.opencue_proto_path }}
      opencue_rqd_path: ${{ steps.package_outputs.outputs.opencue_rqd_path }}
      opencue_pycue_path: ${{ steps.package_outputs.outputs.opencue_pycue_path }}
      opencue_pyoutline_path: ${{ steps.package_outputs.outputs.opencue_pyoutline_path }}
      opencue_cueadmin_path: ${{ steps.package_outputs.outputs.opencue_cueadmin_path }}
      opencue_cuesubmit_path: ${{ steps.package_outputs.outputs.opencue_cuesubmit_path }}
      opencue_cuegui_path: ${{ steps.package_outputs.outputs.opencue_cuegui_path }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-tags: true
          fetch-depth: 0

      - name: Mark repository as safe (Fix for https://github.com/actions/checkout/issues/1048)
        run: git config --global --add safe.directory $GITHUB_WORKSPACE

      - uses: ./.github/actions/build-python-packages

      - name: Gather package paths
        id: package_outputs
        run: |
          echo "opencue_proto_path=$(ls -a packages/opencue_proto-*.whl)" >> $GITHUB_OUTPUT
          echo "opencue_rqd_path=$(ls -a packages/opencue_rqd-*.whl)" >> $GITHUB_OUTPUT
          echo "opencue_pycue_path=$(ls -a packages/opencue_pycue-*.whl)" >> $GITHUB_OUTPUT
          echo "opencue_pyoutline_path=$(ls -a packages/opencue_pyoutline-*.whl)" >> $GITHUB_OUTPUT
          echo "opencue_cuesubmit_path=$(ls -a packages/opencue_cuesubmit-*.whl)" >> $GITHUB_OUTPUT
          echo "opencue_cueadmin_path=$(ls -a packages/opencue_cueadmin-*.whl)" >> $GITHUB_OUTPUT
          echo "opencue_cuegui_path=$(ls -a packages/opencue_cuegui-*.whl)" >> $GITHUB_OUTPUT

  upload_python_packages_test:
    needs: build_opencue_packages
    runs-on: ubuntu-22.04
    container: python:3.11
    name: "Upload python packages to testpypi repo"
    environment: testpypi
    env:
      TWINE_USERNAME: "__token__"
      TWINE_PASSWORD: "${{ secrets.TEST_PYPI_API_TOKEN }}"
      TWINE_REPOSITORY: "testpypi"

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: opencue_packages
          path: packages

      - name: Upload packages
        run: |
          python3 -m pip install --upgrade twine
          python3 -m twine upload --verbose packages/opencue_*

  build_docker_images:
    needs: build_opencue_packages
    runs-on: ubuntu-22.04
    name: "Build Docker Images"
    strategy:
      matrix:
        # Disable cuebot for now
        component: [pycue, rqd, pyoutline, cuesubmit, cueadmin, cuegui]

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-tags: true
          fetch-depth: 0

      - name: Download a single artifact
        uses: actions/download-artifact@v4
        with:
          name: opencue_packages
          path: packages/

      - name: Build ${{ matrix.component }} Docker Image
        run: |
          docker build \
                --build-arg OPENCUE_PROTO_PACKAGE_PATH="${{ needs.build_opencue_packages.outputs.opencue_proto_path }}" \
                --build-arg OPENCUE_RQD_PACKAGE_PATH="${{ needs.build_opencue_packages.outputs.opencue_rqd_path }}" \
                --build-arg OPENCUE_PYCUE_PACKAGE_PATH="${{ needs.build_opencue_packages.outputs.opencue_pycue_path }}" \
                --build-arg OPENCUE_PYOUTLINE_PACKAGE_PATH="${{ needs.build_opencue_packages.outputs.opencue_pyoutline_path }}" \
                --build-arg OPENCUE_CUESUBMIT_PACKAGE_PATH="${{ needs.build_opencue_packages.outputs.opencue_cuesubmit_path }}" \
                --build-arg OPENCUE_CUEGUI_PACKAGE_PATH="${{ needs.build_opencue_packages.outputs.opencue_cuegui_path }}" \
                --build-arg OPENCUE_CUEADMIN_PACKAGE_PATH="${{ needs.build_opencue_packages.outputs.opencue_cueadmin_path }}" \
                -f ${{ matrix.component }}/Dockerfile .

  release_docker_images:
    # needs: preflight
    runs-on: ubuntu-22.04
    environment: dockerhub
    strategy:
      matrix:
        component: [cuebot, rqd, pycue, pyoutline, cuegui, cuesubmit, cueadmin]

    name: Release ${{ matrix.component }} Docker image
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-tags: true
          fetch-depth: 0

      - name: Mark repository as safe (Fix for https://github.com/actions/checkout/issues/1048)
        run: git config --global --add safe.directory $GITHUB_WORKSPACE

      - name: Set build ID
        run: |
          set -e
          echo "Build ID: $(ci/generate_version_number.py)"
          echo "BUILD_ID=$(ci/generate_version_number.py)" >> ${GITHUB_ENV}

      - name: Get current tag name
        run: echo "TAG_NAME=${GITHUB_REF/refs\/tags\//}" >> ${GITHUB_ENV}

      - name: Verify tag name and version match
        run: |
          set -e
          if [ "v$(ci/generate_version_number.py)" != "${TAG_NAME}" ]; then
            echo "Version check failed: code version v$(ci/generate_version_number.py) does not match tag name ${TAG_NAME}"
            echo "Original GITHUB_REF: ${GITHUB_REF}"
            exit 1
          fi

      - name: Pull Docker image from staging
        run: |
          set -e
          docker pull opencuebuild/${{ matrix.component }}:${BUILD_ID}

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PASS }}

      - name: Rebuild and push Docker image
        uses: docker/build-push-action@v3
        with:
          file: ${{ matrix.component }}/Dockerfile
          tags: opencue/${{ matrix.component }}:${{ env.BUILD_ID }},opencue/${{ matrix.component }}:latest
          context: .
          push: true

      # This step has been failing with permission issues.
      # Commenting this out temporarily to unblock the release of v1.4
      # - name: Docker Hub Description
      #   uses: peter-evans/dockerhub-description@v4
      #   with:
      #     username: ${{ secrets.DOCKER_USER }}
      #     password: ${{ secrets.DOCKER_PASS }}
      #     repository: opencue/${{ matrix.component }}
      #     readme-filepath: ./${{ matrix.component }}/README.md

  create_release:
    # needs: preflight
    name: Create Release
    environment: dockerhub
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.S3_REGION }}
          role-to-assume: ${{ secrets.AWS_S3_ROLE }}
          role-duration-seconds: 1800

      - name: Set build ID
        run: |
          set -e
          ci/generate_version_number.sh > VERSION
          echo "Build ID: $(ci/generate_version_number.py)"
          echo "BUILD_ID=$(ci/generate_version_number.py)" >> ${GITHUB_ENV}

      - name: Fetch artifacts
        id: fetch_artifacts
        env:
          S3_BUCKET: ${{ secrets.S3_BUCKET }}
        run: |
          mkdir -p "${GITHUB_WORKSPACE}/artifacts/"
          aws s3 sync "s3://${S3_BUCKET}/opencue/${BUILD_ID}/" "${GITHUB_WORKSPACE}/artifacts/"
          echo "filenames=$(ls "${GITHUB_WORKSPACE}/artifacts/" | xargs)" >> ${GITHUB_OUTPUT}

      - name: List artifacts
        run: |
          echo ${{ steps.fetch_artifacts.outputs.filenames }}

      - name: Generate release notes
        id: release_notes
        run: |
          last_tagged_version=$(git describe --tags --abbrev=0 $(git rev-list --tags --skip=1 --max-count=1))
          commits_since_last_release=$(git log --reverse --pretty="* %H %s" ${last_tagged_version}..HEAD)
          # Use a delimiter to preserve the multiline string.
          # See https://github.community/t/set-output-truncates-multiline-strings/16852
          delimiter="$(openssl rand -hex 8)"
          echo "commits<<${delimiter}" >> ${GITHUB_OUTPUT}
          echo "${commits_since_last_release}" >> ${GITHUB_OUTPUT}
          echo "${delimiter}" >> ${GITHUB_OUTPUT}

      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ env.BUILD_ID }}
          release_name: v${{ env.BUILD_ID }}
          body: |
            To learn how to install and configure OpenCue, see our [Getting Started guide](https://www.opencue.io/docs/getting-started/).

            ## Changes:

            ${{ steps.release_notes.outputs.commits }}
          draft: true
          prerelease: false

      - name: Upload License
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ github.workspace }}/artifacts/LICENSE
          asset_name: LICENSE
          asset_content_type: application/octet-stream

      - name: Upload Database Schema
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ github.workspace }}/artifacts/schema-${{ env.BUILD_ID }}.sql
          asset_name: schema-${{ env.BUILD_ID }}.sql
          asset_content_type: application/octet-stream

      - name: Upload Demo Data
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ github.workspace }}/artifacts/seed_data-${{ env.BUILD_ID }}.sql
          asset_name: seed_data-${{ env.BUILD_ID }}.sql
          asset_content_type: application/octet-stream

      - name: Upload Cuebot JAR
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ github.workspace }}/artifacts/cuebot-${{ env.BUILD_ID }}-all.jar
          asset_name: cuebot-${{ env.BUILD_ID }}-all.jar
          asset_content_type: application/octet-stream

      - name: Upload Cuebot RPM
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ github.workspace }}/artifacts/opencue-cuebot-${{ env.BUILD_ID }}-1.noarch.rpm
          asset_name: opencue-cuebot-${{ env.BUILD_ID }}-1.noarch.rpm
          asset_content_type: application/octet-stream

      - name: Upload RQD Tar
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ github.workspace }}/artifacts/rqd-${{ env.BUILD_ID }}-all.tar.gz
          asset_name: rqd-${{ env.BUILD_ID }}-all.tar.gz
          asset_content_type: application/octet-stream

      - name: Upload CueGUI Tar
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ github.workspace }}/artifacts/cuegui-${{ env.BUILD_ID }}-all.tar.gz
          asset_name: cuegui-${{ env.BUILD_ID }}-all.tar.gz
          asset_content_type: application/octet-stream

      - name: Upload PyCue Tar
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ github.workspace }}/artifacts/pycue-${{ env.BUILD_ID }}-all.tar.gz
          asset_name: pycue-${{ env.BUILD_ID }}-all.tar.gz
          asset_content_type: application/octet-stream

      - name: Upload PyOutline Tar
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ github.workspace }}/artifacts/pyoutline-${{ env.BUILD_ID }}-all.tar.gz
          asset_name: pyoutline-${{ env.BUILD_ID }}-all.tar.gz
          asset_content_type: application/octet-stream

      - name: Upload CueSubmit Tar
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ github.workspace }}/artifacts/cuesubmit-${{ env.BUILD_ID }}-all.tar.gz
          asset_name: cuesubmit-${{ env.BUILD_ID }}-all.tar.gz
          asset_content_type: application/octet-stream

      - name: Upload CueAdmin Tar
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ github.workspace }}/artifacts/cueadmin-${{ env.BUILD_ID }}-all.tar.gz
          asset_name: cueadmin-${{ env.BUILD_ID }}-all.tar.gz
          asset_content_type: application/octet-stream
