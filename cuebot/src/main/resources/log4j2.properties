##############################################################
# OpenCue Logging Configuration
##############################################################

# Log4j uses "appenders" and "loggers". Loggers define the logging behavior within the
# application. Appenders deliver the log messages to the intended targets. Loggers must
# be associated with appenders in order for log messages to be written out.

# Stdout.
appender.console.type = Console
appender.console.name = STDOUT
appender.console.layout.type = PatternLayout
appender.console.layout.pattern = %d %p %t %c - %m%n
appender.console.filter.threshold.type = ThresholdFilter
appender.console.filter.threshold.level = warn

# Main log file.
appender.rolling.type = RollingFile
appender.rolling.name = FILE
appender.rolling.fileName = logs/spcue.log
appender.rolling.filePattern = logs/spcue.log.%i
appender.rolling.layout.type = PatternLayout
appender.rolling.layout.pattern = %d %p %t %c - %m%n
appender.rolling.policies.type = Policies
appender.rolling.policies.size.type = SizeBasedTriggeringPolicy
appender.rolling.policies.size.size=10MB
appender.rolling.strategy.type = DefaultRolloverStrategy
appender.rolling.strategy.max = 10

# API log file, for logging API requests only.
appender.api.type = RollingFile
appender.api.name = API
appender.api.fileName = logs/api.log
appender.api.filePattern = logs/api.log.%i
appender.api.layout.type = PatternLayout
appender.api.layout.pattern = %d:%m%n
appender.api.policies.type = Policies
appender.api.policies.size.type = SizeBasedTriggeringPolicy
appender.api.policies.size.size = 10MB
appender.api.strategy.type = DefaultRolloverStrategy
appender.api.strategy.max = 20
appender.api.filter.threshold.type = ThresholdFilter
appender.api.filter.threshold.level = info

# HEALTH log file
appender.health.type = RollingFile
appender.health.name = HEALTH
appender.health.fileName = logs/health.log
appender.health.filePattern = logs/health.log.%i
appender.health.layout.type = PatternLayout
appender.health.layout.pattern = %d:%m%n
appender.health.policies.type = Policies
appender.health.policies.size.type = SizeBasedTriggeringPolicy
appender.health.policies.size.size = 10MB
appender.health.strategy.type = DefaultRolloverStrategy
appender.health.strategy.max = 20
appender.health.filter.threshold.type = ThresholdFilter
appender.health.filter.threshold.level = debug

# Root-level logger. All messages will go to both stdout and the main log file, though they
# may not appear there if the appender filters based on log level. For example INFO messages
# will not appear by default in stdout as the default log level for that appender is WARN.
rootLogger.level = info
rootLogger.appenderRef.stdout.ref = STDOUT
rootLogger.appenderRef.file.ref = FILE

# API logger. Does not inherit from the root logger, so only API requests will be logged.
logger.api.name = API
logger.api.level = info
logger.api.additivity = false
logger.api.appenderRef.api.ref = API

# HEALTH logger. Does not inherit from the root logger, so only HEALTH requests will be logged.
logger.health.name = HEALTH
logger.health.level = debug
logger.health.additivity = false
logger.health.appenderRef.health.ref = HEALTH

# Child loggers. These inherit from the root logger, so will be sent to the relevant appenders.
# This allows us to increase verbosity for specific modules.

logger.catalina.name = org.apache.catalina
logger.catalina.level = info

logger.spcue.name = com.imageworks.spcue
logger.spcue.level = debug

logger.rqdReport.name = com.imageworks.spcue.dispatcher.RqdReportManagerService
logger.rqdReport.level = debug

logger.hostManager.name = com.imageworks.spcue.service.HostManagerService
logger.hostManager.level = trace

logger.dispatcher.name = com.imageworks.spcue.dispatcher
logger.dispatcher.level = trace

# For very verbose sql output:
# logger.sql.name = org.springframework.jdbc.core
# logger.sql.level = debug
# logger.sqlJdbcTemplate.name = org.springframework.jdbc.core.JdbcTemplate
# logger.sqlJdbcTemplate.level = debug
# logger.sqlStatementCreator.name = org.springframework.jdbc.core.StatementCreatorUtils
# logger.sqlStatementCreator.level = trace
