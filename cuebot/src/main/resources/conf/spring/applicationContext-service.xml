<?xml version="1.0" encoding="UTF-8"?>
<!--
   Copyright (c) 2018 Sony Pictures Imageworks Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
-->


<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="
         http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
         http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-2.5.xsd">

  <!--
    Enables annotation driven Transaction setup. Any class you want to be Transactional must have a
    @Transactional annotation. By default, all methods of the class become ISOLATION_DEFAULT and
    PROPAGATION_REQUIRED. Its also possible to override those defaults on a method by method basis.
    See the Spring documentation for examples:

    http://static.springframework.org/spring/docs/2.5.x/reference/transaction.html
  -->
  <tx:annotation-driven transaction-manager="transactionManager" />

  <!-- ##################################################################################### -->
  <!-- Non-Transactional Service Domain -->
  <!-- ##################################################################################### -->

  <bean id="rqdClient" class="com.imageworks.spcue.rqd.RqdClientGrpc">
    <constructor-arg index="0" type="int">
      <value>${grpc.rqd_server_port}</value>
    </constructor-arg>
    <constructor-arg index="1" type="int">
      <value>${grpc.rqd_cache_size}</value>
    </constructor-arg>
    <constructor-arg index="2" type="int">
      <value>${grpc.rqd_cache_expiration}</value>
    </constructor-arg>
  </bean>

  <bean id="launchQueue" class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
    <property name="corePoolSize" value="1" />
    <property name="maxPoolSize" value="1" />
    <property name="queueCapacity" value="100" />
  </bean>

  <bean id="dispatchPool" class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
    <property name="corePoolSize" value="4" />
    <property name="maxPoolSize" value="4" />
    <property name="queueCapacity" value="500" />
  </bean>

  <bean id="killPool" class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
    <property name="corePoolSize" value="4" />
    <property name="maxPoolSize" value="4" />
    <property name="queueCapacity" value="500" />
  </bean>

  <bean id="managePool" class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
    <property name="corePoolSize" value="8" />
    <property name="maxPoolSize" value="8" />
    <property name="queueCapacity" value="250" />
  </bean>

  <bean id="dispatchQueue" class="com.imageworks.spcue.dispatcher.DispatchQueue" destroy-method="shutdown">
    <constructor-arg index="0" type="java.lang.String">
      <value>DispatchQueue</value>
    </constructor-arg>
    <property name="dispatchPool" ref="dispatchPool" />
  </bean>

  <bean id="manageQueue" class="com.imageworks.spcue.dispatcher.DispatchQueue" destroy-method="shutdown">
    <constructor-arg index="0" type="java.lang.String">
      <value>ManageQueue</value>
    </constructor-arg>
    <property name="dispatchPool" ref="managePool" />
  </bean>

  <bean id="reportQueue" class="com.imageworks.spcue.dispatcher.HostReportQueue" destroy-method="shutdown"/>
  <bean id="killQueue" class="com.imageworks.spcue.dispatcher.HostReportQueue" destroy-method="shutdown"/>

  <bean id="bookingQueue" class="com.imageworks.spcue.dispatcher.BookingQueue" destroy-method="shutdown">
    <constructor-arg index="0" type="int">
      <value>300</value>
    </constructor-arg>
  </bean>

  <!-- ##################################################################################### -->
  <!-- Service Domain -->
  <!-- ##################################################################################### -->

  <bean id="ownerManager" class="com.imageworks.spcue.service.OwnerManagerService">
    <property name="ownerDao" ref="ownerDao" />
    <property name="deedDao" ref="deedDao" />
    <property name="hostDao" ref="hostDao" />
  </bean>


  <bean id="departmentManager" class="com.imageworks.spcue.service.DepartmentManagerService">
    <property name="taskDao" ref="taskDao" />
    <property name="showDao" ref="showDao" />
    <property name="trackitDao" ref="trackitDao" />
    <property name="pointDao" ref="pointDao" />
    <property name="jobDao" ref="jobDao" />
  </bean>

  <bean id="commentManager" class="com.imageworks.spcue.service.CommentManagerService">
    <property name="commentDao" ref="commentDao" />
    <property name="emailSupport" ref="emailSupport" />
    <property name="adminManager" ref="adminManager" />
  </bean>

  <bean id="dependManager" class="com.imageworks.spcue.service.DependManagerService">
    <property name="dependDao" ref="dependDao" />
    <property name="jobDao" ref="jobDao" />
    <property name="layerDao" ref="layerDao" />
    <property name="frameDao" ref="frameDao" />
    <property name="frameSearchFactory" ref="frameSearchFactory" />
  </bean>

  <bean id="dispatchSupport" class="com.imageworks.spcue.dispatcher.DispatchSupportService">
    <property name="dispatcherDao" ref="dispatcherDao" />
    <property name="jobDao" ref="jobDao" />
    <property name="frameDao" ref="frameDao" />
    <property name="procDao" ref="procDao" />
    <property name="hostDao" ref="hostDao" />
    <property name="layerDao" ref="layerDao" />
    <property name="showDao" ref="showDao" />
    <property name="dependManager" ref="dependManager" />
    <property name="rqdClient" ref="rqdClient" />
    <property name="subscriptionDao" ref="subscriptionDao" />
    <property name="redirectManager" ref="redirectManager" />
    <property name="bookingManager" ref="bookingManager" />
    <property name="bookingDao" ref="bookingDao" />
  </bean>

  <bean id="filterManager" class="com.imageworks.spcue.service.FilterManagerService">
    <property name="filterDao" ref="filterDao" />
    <property name="actionDao" ref="actionDao" />
    <property name="matcherDao" ref="matcherDao" />
    <property name="groupDao" ref="groupDao" />
    <property name="jobDao" ref="jobDao" />
    <property name="layerDao" ref="layerDao" />
  </bean>

  <bean id="whiteboard" class="com.imageworks.spcue.service.WhiteboardService">
    <property name="whiteboardDao" ref="whiteboardDao" />
    <property name="nestedWhiteboardDao" ref="nestedWhiteboardDao" />
    <property name="jobDao" ref="jobDao" />
  </bean>

  <bean id="jobLogUtil" class="com.imageworks.spcue.util.JobLogUtil" />

  <bean id="jobManager" class="com.imageworks.spcue.service.JobManagerService">
    <property name="jobDao" ref="jobDao" />
    <property name="showDao" ref="showDao" />
    <property name="frameDao" ref="frameDao" />
    <property name="layerDao" ref="layerDao" />
    <property name="groupDao" ref="groupDao" />
    <property name="facilityDao" ref="facilityDao" />
    <property name="dependManager" ref="dependManager" />
    <property name="filterManager" ref="filterManager" />
    <property name="hostDao" ref="hostDao" />
    <property name="limitDao" ref="limitDao" />
    <property name="jobLogUtil" ref="jobLogUtil" />
  </bean>

  <bean id="mailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
    <property name="host" value="smtp"/>
  </bean>

  <bean id="emailSupport" class="com.imageworks.spcue.service.EmailSupport">
    <property name="jobManager" ref="jobManager"/>
    <property name="mailSender" ref="mailSender"/>
  </bean>

  <bean id="jobManagerSupport" class="com.imageworks.spcue.service.JobManagerSupport">
    <property name="jobManager" ref="jobManager" />
    <property name="hostManager" ref="hostManager" />
    <property name="dependManager" ref="dependManager" />
    <property name="manageQueue" ref="manageQueue" />
    <property name="dispatchSupport" ref="dispatchSupport" />
    <property name="rqdClient" ref="rqdClient" />
    <property name="departmentManager" ref="departmentManager"/>
    <property name="redirectManager" ref="redirectManager" />
    <property name="emailSupport" ref="emailSupport"/>
    <property name="frameSearchFactory" ref="frameSearchFactory" />
  </bean>

  <bean id="jobLauncher" class="com.imageworks.spcue.service.JobLauncher">
    <property name="departmentManager" ref="departmentManager"/>
    <property name="launchQueue" ref="launchQueue" />
    <property name="adminManager" ref="adminManager"/>
    <property name="jobManager" ref="jobManager"/>
    <property name="emailSupport" ref="emailSupport"/>
    <property name="jmsMover" ref="jmsMover"/>
    <property name="localBookingSupport" ref="localBookingSupport" />
  </bean>

  <bean id="hostManager" class="com.imageworks.spcue.service.HostManagerService">
    <property name="hostDao" ref="hostDao" />
    <property name="rqdClient" ref="rqdClient" />
    <property name="procDao" ref="procDao" />
    <property name="showDao" ref="showDao" />
    <property name="subscriptionDao" ref="subscriptionDao" />
    <property name="allocationDao" ref="allocationDao" />
    <property name="facilityDao" ref="facilityDao" />
  </bean>

  <bean id="groupManager" class="com.imageworks.spcue.service.GroupManagerService">
    <property name="jobDao" ref="jobDao" />
    <property name="departmentDao" ref="departmentDao" />
    <property name="groupDao" ref="groupDao" />
    <property name="departmentManager" ref="departmentManager" />
  </bean>

  <bean id="adminManager" class="com.imageworks.spcue.service.AdminManagerService">
    <property name="showDao" ref="showDao" />
    <property name="departmentDao" ref="departmentDao" />
    <property name="allocationDao" ref="allocationDao" />
    <property name="subscriptionDao" ref="subscriptionDao" />
    <property name="facilityDao" ref="facilityDao" />
    <property name="limitDao" ref="limitDao" />
    <property name="groupManager" ref="groupManager"/>
  </bean>

  <bean id="historicalManager" class="com.imageworks.spcue.service.HistoricalManagerService">
    <property name="historicalDao" ref="historicalDao" />
  </bean>

  <bean id="historicalSupport" class="com.imageworks.spcue.service.HistoricalSupport">
    <property name="historicalManager" ref="historicalManager" />
  </bean>

  <bean id="serviceManager" class="com.imageworks.spcue.service.ServiceManagerService">
    <property name="serviceDao" ref="serviceDao"/>
  </bean>

  <bean scope="prototype" id="jobSpec" class="com.imageworks.spcue.service.JobSpec">
    <property name="serviceManager" ref="serviceManager"/>
  </bean>

  <!-- ##################################################################################### -->
  <!-- Dispatcher -->
  <!-- ##################################################################################### -->

  <bean id="bookingManager" class="com.imageworks.spcue.service.BookingManagerService">
    <property name="bookingQueue" ref="bookingQueue" />
    <property name="bookingDao" ref="bookingDao" />
    <property name="localDispatcher" ref="localDispatcher" />
    <property name="jobManager" ref="jobManager" />
    <property name="jobManagerSupport" ref="jobManagerSupport" />
    <property name="jobDao" ref="jobDao" />
    <property name="hostDao" ref="hostDao" />
    <property name="procDao" ref="procDao" />
  </bean>

  <bean id="localBookingSupport" class="com.imageworks.spcue.service.LocalBookingSupport">
    <property name="hostManager" ref="hostManager" />
    <property name="bookingManager" ref="bookingManager" />
    <property name="localDispatcher" ref="localDispatcher" />
    <property name="ownerManager" ref="ownerManager" />
  </bean>

  <bean id="dispatcher" class="com.imageworks.spcue.dispatcher.CoreUnitDispatcher">
    <property name="dispatchSupport" ref="dispatchSupport" />
    <property name="jobManager" ref="jobManager" />
    <property name="hostManager" ref="hostManager" />
    <property name="rqdClient" ref="rqdClient" />
  </bean>

  <bean id="localDispatcher" class="com.imageworks.spcue.dispatcher.LocalDispatcher">
    <property name="dispatchSupport" ref="dispatchSupport" />
    <property name="jobManager" ref="jobManager" />
    <property name="bookingManager" ref="bookingManager" />
    <property name="hostManager" ref="hostManager" />
    <property name="rqdClient" ref="rqdClient" />
  </bean>

  <bean id="redirectService" class="com.imageworks.spcue.service.RedirectService">
    <constructor-arg ref="redirectDao" />
  </bean>

  <bean id="redirectManager" class="com.imageworks.spcue.dispatcher.RedirectManager">
    <constructor-arg ref="redirectService" />
    <property name="jobDao" ref="jobDao" />
    <property name="hostManager" ref="hostManager" />
    <property name="groupDao" ref="groupDao" />
    <property name="procDao" ref="procDao" />
    <property name="bookingQueue" ref="bookingQueue" />
    <property name="dispatcher" ref="dispatcher" />
    <property name="jobManagerSupport" ref="jobManagerSupport" />
    <property name="dispatchSupport" ref="dispatchSupport" />
    <property name="procSearchFactory" ref="procSearchFactory" />
  </bean>

  <bean id="frameCompleteHandler" class="com.imageworks.spcue.dispatcher.FrameCompleteHandler" destroy-method="shutdown">
    <property name="hostManager" ref="hostManager" />
    <property name="jobManager" ref="jobManager" />
    <property name="jobManagerSupport" ref="jobManagerSupport" />
    <property name="redirectManager" ref="redirectManager"/>
    <property name="bookingManager" ref="bookingManager"/>
    <property name="dispatchQueue" ref="dispatchQueue" />
    <property name="bookingQueue" ref="bookingQueue" />
    <property name="dispatcher" ref="dispatcher" />
    <property name="localDispatcher" ref="localDispatcher" />
    <property name="dispatchSupport" ref="dispatchSupport" />
    <property name="jmsMover" ref="jmsMover"/>
  </bean>

  <bean id="hostReportHandler" class="com.imageworks.spcue.dispatcher.HostReportHandler" destroy-method="shutdown">
    <property name="hostManager" ref="hostManager" />
    <property name="bookingQueue" ref="bookingQueue" />
    <property name="reportQueue" ref="reportQueue" />
    <property name="dispatchSupport" ref="dispatchSupport" />
    <property name="dispatcher" ref="dispatcher" />
    <property name="localDispatcher" ref="localDispatcher" />
    <property name="rqdClient" ref="rqdClient" />
    <property name="jobManager" ref="jobManager" />
    <property name="bookingManager" ref="bookingManager" />
    <property name="jobManagerSupport" ref="jobManagerSupport" />
    <property name="jobDao" ref="jobDao" />
    <property name="layerDao" ref="layerDao" />
    <property name="killQueue" ref="killQueue"/>
  </bean>

  <!-- ##################################################################################### -->
  <!-- Timers -->
  <!-- ##################################################################################### -->

  <bean id="maintenanceManager" class="com.imageworks.spcue.service.MaintenanceManagerSupport">
    <property name="dispatchSupport" ref="dispatchSupport" />
    <property name="procDao" ref="procDao" />
    <property name="frameDao" ref="frameDao" />
    <property name="maintenanceDao" ref="maintenanceDao" />
    <property name="historicalSupport" ref="historicalSupport" />
    <property name="departmentManager" ref="departmentManager" />
    <property name="jobManager" ref="jobManager" />
  </bean>

  <bean id="hardwareCheck" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
    <property name="targetObject" ref="maintenanceManager" />
    <property name="targetMethod" value="checkHardwareState" />
  </bean>

  <bean id="archiveFinishedJobs" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
    <property name="targetObject" ref="maintenanceManager" />
    <property name="targetMethod" value="archiveFinishedJobs" />
  </bean>

  <bean id="taskUpdate" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
    <property name="targetObject" ref="maintenanceManager" />
    <property name="targetMethod" value="updateTaskValues" />
  </bean>

  <bean id="staleCheckpointCheck" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
    <property name="targetObject" ref="maintenanceManager" />
    <property name="targetMethod" value="clearStaleCheckpoints" />
  </bean>

  <bean id="hardwareCheckTrigger" class="org.springframework.scheduling.quartz.SimpleTriggerFactoryBean">
    <property name="jobDetail" ref="hardwareCheck" />
    <!--
      10 minute second start delay We want to give procs a chance to report in when the host first
      starts, otherwise valid proc will be deleted.
    -->
    <property name="startDelay" value="600000" />
    <!-- repeat every 30 seconds -->
    <property name="repeatInterval" value="30000" />
  </bean>

  <bean id="archiveFinishedJobsTrigger" class="org.springframework.scheduling.quartz.SimpleTriggerFactoryBean">
    <property name="jobDetail" ref="archiveFinishedJobs" />
    <!--
      10 minute second start delay. Let the cue get up and running and sort out any problems before
      doing the proc check.
    -->
    <property name="startDelay" value="600000" />
    <!-- repeat every 1 hour -->
    <property name="repeatInterval" value="3600000" />
  </bean>

  <bean id="taskUpdateTrigger" class="org.springframework.scheduling.quartz.SimpleTriggerFactoryBean">
    <property name="jobDetail" ref="taskUpdate" />
    <!--
      10 minute second start delay. Let the cue get up and running and sort out any problems before
      doing the proc check.
    -->
    <property name="startDelay" value="10000" />
    <!-- repeat every 1 hour -->
    <property name="repeatInterval" value="3600000" />
  </bean>

  <bean id="staleCheckpointTrigger" class="org.springframework.scheduling.quartz.SimpleTriggerFactoryBean">
    <property name="jobDetail" ref="staleCheckpointCheck" />
    <property name="startDelay" value="10000" />
    <property name="repeatInterval" value="300000" />
  </bean>

  <bean id="redirectExpire" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
    <property name="targetObject" ref="redirectManager" />
    <property name="targetMethod" value="deleteExpired" />
  </bean>

  <bean id="redirectExpireTrigger" class="org.springframework.scheduling.quartz.SimpleTriggerFactoryBean">
    <property name="jobDetail" ref="redirectExpire" />
    <property name="startDelay" value="60000" />
    <!-- repeat every 12 hours -->
    <property name="repeatInterval" value="43200000" />
  </bean>

  <bean class="org.springframework.scheduling.quartz.SchedulerFactoryBean" destroy-method="destroy">
   <property name="waitForJobsToCompleteOnShutdown"><value>false</value></property>
    <property name="triggers">
      <list>
        <ref bean="hardwareCheckTrigger" />
        <ref bean="archiveFinishedJobsTrigger" />
        <ref bean="taskUpdateTrigger" />
        <ref bean="staleCheckpointTrigger" />
        <ref bean="redirectExpireTrigger" />
      </list>
    </property>
  </bean>
</beans>


