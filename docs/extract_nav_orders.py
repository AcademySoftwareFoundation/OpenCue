#!/usr/bin/env python3
"""
Extract nav_order values and file paths from all markdown files in _docs directory.
Saves to nav_order_index.txt in the docs directory.
"""

import re
from pathlib import Path

def extract_nav_order(file_path):
    """Extract nav_order from YAML front matter in a markdown file."""
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()

        # Check if file has YAML front matter
        if not content.startswith('---'):
            return None

        # Extract YAML front matter
        match = re.search(r'^---\n(.*?)\n---', content, re.DOTALL)
        if not match:
            return None

        front_matter = match.group(1)

        # Extract nav_order value
        nav_order_match = re.search(r'^nav_order:\s*(\d+)', front_matter, re.MULTILINE)
        if nav_order_match:
            return int(nav_order_match.group(1))

    except Exception as e:
        print(f"Error reading {file_path}: {e}")

    return None

def main():
    # Get the docs/_docs directory
    docs_dir = Path(__file__).parent / '_docs'

    if not docs_dir.exists():
        print(f"Error: Directory {docs_dir} does not exist")
        return

    # Find all .md files
    md_files = sorted(docs_dir.rglob('*.md'))

    # Extract nav_order from each file
    results = []
    files_without_nav_order = []

    for md_file in md_files:
        nav_order = extract_nav_order(md_file)
        if nav_order is not None:
            results.append((nav_order, str(md_file)))
        else:
            files_without_nav_order.append(str(md_file))

    # Sort by nav_order
    results.sort(key=lambda x: x[0])

    # Write to nav_order_index.txt
    output_file = Path(__file__).parent / 'nav_order_index.txt'

    with open(output_file, 'w', encoding='utf-8') as f:
        f.write("# OpenCue Documentation nav_order Index\n")
        f.write("# Format: nav_order|file_path\n")
        f.write("#\n")
        f.write("# This file is automatically generated.\n")
        f.write("# To update nav_order values, edit this file and run update_nav_order.py\n")
        f.write("#\n\n")

        for nav_order, file_path in results:
            f.write(f"{nav_order}|{file_path}\n")

        if files_without_nav_order:
            f.write("\n# Files without nav_order:\n")
            for file_path in files_without_nav_order:
                f.write(f"#   {file_path}\n")

    print(f"Extracted {len(results)} nav_order values")
    print(f"Found {len(files_without_nav_order)} files without nav_order")
    print(f"Results saved to: {output_file}")

if __name__ == '__main__':
    main()
