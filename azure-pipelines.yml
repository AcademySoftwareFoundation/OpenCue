# OpenCue Build and Test Pipeline

variables:
  ARTIFACT_DIRECTORY: ./build

# Trigger the pipeline on every commit to master. Pull Requests to any branch will trigger
# the pipeline as well, by default.
trigger:
- master

jobs:
- job: build
  displayName: Build
  pool:
    vmImage: 'ubuntu-16.04'
  steps:
  - bash: |
      ci/generate_version_number.sh
      echo "##vso[task.setvariable variable=buildId;isOutput=true]$(cat ./VERSION)"
    name: setBuildId
    displayName: Generate Build ID

  - bash: mkdir -p $(ARTIFACT_DIRECTORY)
    name: createArtifactDirectory
    displayName: Create Artifact Directory

  - bash: |
      docker build -t opencue/cuebot:$(setBuildId.buildId) -f cuebot/Dockerfile .
      container_id=$(docker create opencue/cuebot:$(setBuildId.buildId))
      docker cp $container_id:/opt/opencue/cuebot-$(setBuildId.buildId)-all.jar "$(ARTIFACT_DIRECTORY)/"
      docker rm $container_id
    name: cuebot
    displayName: Build and Test Cuebot

  - bash: |
      docker build -t opencue/rqd:$(setBuildId.buildId) -f rqd/Dockerfile .
      container_id=$(docker create opencue/rqd:$(setBuildId.buildId))
      docker cp $container_id:/opt/opencue/rqd-$(setBuildId.buildId)-all.tar.gz "$(ARTIFACT_DIRECTORY)/"
      docker rm $container_id
    name: rqd
    displayName: Build and Test RQD

  - bash: |
      docker build -t opencue/pycue:$(setBuildId.buildId) -f pycue/Dockerfile .
      container_id=$(docker create opencue/pycue:$(setBuildId.buildId))
      docker cp $container_id:/opt/opencue/pycue-$(setBuildId.buildId)-all.tar.gz "$(ARTIFACT_DIRECTORY)/"
      docker rm $container_id
    name: pycue
    displayName: Build and Test PyCue

  - bash: |
      docker build -t opencue/pyoutline:$(setBuildId.buildId) -f pyoutline/Dockerfile .
      container_id=$(docker create opencue/pyoutline:$(setBuildId.buildId))
      docker cp $container_id:/opt/opencue/pyoutline-$(setBuildId.buildId)-all.tar.gz "$(ARTIFACT_DIRECTORY)/"
      docker rm $container_id
    name: pyoutline
    displayName: Build and Test PyOutline

  - bash: |
      docker build -t opencue/cuegui:$(setBuildId.buildId) -f cuegui/Dockerfile .
      container_id=$(docker create opencue/cuegui:$(setBuildId.buildId))
      docker cp $container_id:/opt/opencue/cuegui-$(setBuildId.buildId)-all.tar.gz "$(ARTIFACT_DIRECTORY)/"
      docker rm $container_id
    name: cuegui
    displayName: Build and Test CueGUI

  - bash: |
      docker build -t opencue/cuesubmit:$(setBuildId.buildId) -f cuesubmit/Dockerfile .
      container_id=$(docker create opencue/cuesubmit:$(setBuildId.buildId))
      docker cp $container_id:/opt/opencue/cuesubmit-$(setBuildId.buildId)-all.tar.gz "$(ARTIFACT_DIRECTORY)/"
      docker rm $container_id
    name: cuesubmit
    displayName: Build and Test CueSubmit

  - bash: |
      docker build -t opencue/cueadmin:$(setBuildId.buildId) -f cueadmin/Dockerfile .
      container_id=$(docker create opencue/cueadmin:$(setBuildId.buildId))
      docker cp $container_id:/opt/opencue/cueadmin-$(setBuildId.buildId)-all.tar.gz "$(ARTIFACT_DIRECTORY)/"
      docker rm $container_id
    name: cueadmin
    displayName: Build and Test CueAdmin

  - bash: ci/extract_artifacts.sh $(setBuildId.buildId) ./$(ARTIFACT_DIRECTORY)
    name: extractArtifacts
    displayName: Extract Build Artifacts

  - bash: ci/extract_schema.sh $(setBuildId.buildId) ./$(ARTIFACT_DIRECTORY)
    name: extractSchema
    displayName: Extract Database Schema

  - publish: $(ARTIFACT_DIRECTORY)/LICENSE
    artifact: License
    displayName: Publish LICENSE

  - publish: $(ARTIFACT_DIRECTORY)/build_metadata.json
    artifact: Build Metadata
    displayName: Publish Build Metadata

  - publish: $(ARTIFACT_DIRECTORY)/cuebot-$(setBuildId.buildId)-all.jar
    artifact: Cuebot JAR
    displayName: Publish Cuebot JAR

  - publish: $(ARTIFACT_DIRECTORY)/rqd-$(setBuildId.buildId)-all.tar.gz
    artifact: RQD Tarball
    displayName: Publish RQD Tarball

  - publish: $(ARTIFACT_DIRECTORY)/pycue-$(setBuildId.buildId)-all.tar.gz
    artifact: PyCue Tarball
    displayName: Publish PyCue Tarball

  - publish: $(ARTIFACT_DIRECTORY)/pyoutline-$(setBuildId.buildId)-all.tar.gz
    artifact: PyOutline Tarball
    displayName: Publish PyOutline Tarball

  - publish: $(ARTIFACT_DIRECTORY)/cuegui-$(setBuildId.buildId)-all.tar.gz
    artifact: CueGUI Tarball
    displayName: Publish CueGUI Tarball

  - publish: $(ARTIFACT_DIRECTORY)/cuesubmit-$(setBuildId.buildId)-all.tar.gz
    artifact: CueSubmit Tarball
    displayName: Publish CueSubmit Tarball

  - publish: $(ARTIFACT_DIRECTORY)/cueadmin-$(setBuildId.buildId)-all.tar.gz
    artifact: CueAdmin Tarball
    displayName: Publish CueAdmin Tarball

  - publish: $(ARTIFACT_DIRECTORY)/schema-$(setBuildId.buildId).sql
    artifact: Database Schema
    displayName: Publish Database Schema

  - publish: $(ARTIFACT_DIRECTORY)/demo_data-$(setBuildId.buildId).sql
    artifact: Demo SQL Data
    displayName: Publish Demo SQL Data
