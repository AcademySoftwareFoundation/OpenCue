# OpenCue packaging pipeline

# Packages code from a commit into distributable artifacts i.e. Docker images, tarballs, etc.

variables:
  ARTIFACT_DIRECTORY: $(Build.ArtifactStagingDirectory)

# Only run this pipeline after new commits are merged into master. Don't run for
# PRs, which is the default behavior.
trigger:
- master
pr: none

jobs:


- job: setBuildId
  displayName: Set Build Id
  pool:
    vmImage: 'ubuntu-16.04'
  steps:
  - bash: |
      set -e
      ci/generate_version_number.sh > VERSION
      echo "##vso[task.setvariable variable=buildId;isOutput=true]$(cat ./VERSION)"
    name: setBuildId
    displayName: Set Build Id


- job: buildDockerImages1
  displayName: Build Docker Images, Part 1
  dependsOn: setBuildId
  pool:
    vmImage: 'ubuntu-16.04'
  variables:
    buildId: $[ dependencies.setBuildId.outputs['setBuildId.buildId'] ]
  steps:
  - bash: ci/generate_version_number.sh > VERSION
    name: generateVersionFile
    displayName: Generate Version File

  - task: Docker@2
    inputs:
      containerRegistry: 'Docker Hub (build)'
      command: 'login'

  - template: templates/build_docker.yml
    parameters:
      imageName: 'cuebot'
      displayName: 'Cuebot'
      artifactPath: '/opt/opencue/cuebot-$(buildId)-all.jar'

  - template: templates/build_docker.yml
    parameters:
      imageName: 'rqd'
      displayName: 'RQD'
      artifactPath: '/opt/opencue/rqd-$(buildId)-all.tar.gz'

  - publish: $(ARTIFACT_DIRECTORY)/cuebot-$(buildId)-all.jar
    artifact: Cuebot JAR
    displayName: Publish Cuebot JAR

  - publish: $(ARTIFACT_DIRECTORY)/rqd-$(buildId)-all.tar.gz
    artifact: RQD Tarball
    displayName: Publish RQD Tarball


- job: buildDockerImages2
  displayName: Build Docker Images, Part 2
  dependsOn: setBuildId
  pool:
    vmImage: 'ubuntu-16.04'
  variables:
    buildId: $[ dependencies.setBuildId.outputs['setBuildId.buildId'] ]
  steps:
  - bash: ci/generate_version_number.sh > VERSION
    name: generateVersionFile
    displayName: Generate Version File

  - task: Docker@2
    inputs:
      containerRegistry: 'Docker Hub (build)'
      command: 'login'

  - template: templates/build_docker.yml
    parameters:
      imageName: 'cuegui'
      displayName: 'CueGUI'
      artifactPath: '/opt/opencue/cuegui-$(buildId)-all.tar.gz'

  - publish: $(ARTIFACT_DIRECTORY)/cuegui-$(buildId)-all.tar.gz
    artifact: CueGUI Tarball
    displayName: Publish CueGUI Tarball


- job: buildDockerImages3
  displayName: Build Docker Images, Part 3
  dependsOn: setBuildId
  pool:
    vmImage: 'ubuntu-16.04'
  variables:
    buildId: $[ dependencies.setBuildId.outputs['setBuildId.buildId'] ]
  steps:
  - bash: ci/generate_version_number.sh > VERSION
    name: generateVersionFile
    displayName: Generate Version File

  - task: Docker@2
    inputs:
      containerRegistry: 'Docker Hub (build)'
      command: 'login'

  - template: templates/build_docker.yml
    parameters:
      imageName: 'pycue'
      displayName: 'PyCue'
      artifactPath: '/opt/opencue/pycue-$(buildId)-all.tar.gz'

  - template: templates/build_docker.yml
    parameters:
      imageName: 'pyoutline'
      displayName: 'PyOutline'
      artifactPath: '/opt/opencue/pyoutline-$(buildId)-all.tar.gz'

  - template: templates/build_docker.yml
    parameters:
      imageName: 'cuesubmit'
      displayName: 'CueSubmit'
      artifactPath: '/opt/opencue/cuesubmit-$(buildId)-all.tar.gz'

  - template: templates/build_docker.yml
    parameters:
      imageName: 'cueadmin'
      displayName: 'CueAdmin'
      artifactPath: '/opt/opencue/cueadmin-$(buildId)-all.tar.gz'

  - publish: $(ARTIFACT_DIRECTORY)/pycue-$(buildId)-all.tar.gz
    artifact: PyCue Tarball
    displayName: Publish PyCue Tarball

  - publish: $(ARTIFACT_DIRECTORY)/pyoutline-$(buildId)-all.tar.gz
    artifact: PyOutline Tarball
    displayName: Publish PyOutline Tarball

  - publish: $(ARTIFACT_DIRECTORY)/cuesubmit-$(buildId)-all.tar.gz
    artifact: CueSubmit Tarball
    displayName: Publish CueSubmit Tarball

  - publish: $(ARTIFACT_DIRECTORY)/cueadmin-$(buildId)-all.tar.gz
    artifact: CueAdmin Tarball
    displayName: Publish CueAdmin Tarball


- job: createOtherArtifacts
  displayName: Create Other Build Artifacts
  dependsOn: setBuildId
  pool:
    vmImage: 'ubuntu-16.04'
  variables:
    buildId: $[ dependencies.setBuildId.outputs['setBuildId.buildId'] ]
  steps:
  - bash: ci/generate_version_number.sh > VERSION
    name: generateVersionFile
    displayName: Generate Version File

  - bash: |
      set -e
      cp LICENSE VERSION "$(ARTIFACT_DIRECTORY)/"
      echo "{\"git_commit\": \"$(BUILD_SOURCEVERSION)\"}" | tee "$(ARTIFACT_DIRECTORY)/build_metadata.json"
    name: createMetadataArtifacts
    displayName: Create Metadata Artifacts

  - bash: ci/extract_schema.sh $(buildId) $(ARTIFACT_DIRECTORY)
    name: extractSchema
    displayName: Extract Database Schema

  - publish: $(ARTIFACT_DIRECTORY)/LICENSE
    artifact: License
    displayName: Publish LICENSE

  - publish: $(ARTIFACT_DIRECTORY)/VERSION
    artifact: Version
    displayName: Publish VERSION

  - publish: $(ARTIFACT_DIRECTORY)/build_metadata.json
    artifact: Build Metadata
    displayName: Publish Build Metadata

  - publish: $(ARTIFACT_DIRECTORY)/schema-$(buildId).sql
    artifact: Database Schema
    displayName: Publish Database Schema

  - publish: $(ARTIFACT_DIRECTORY)/demo_data-$(buildId).sql
    artifact: Demo SQL Data
    displayName: Publish Demo SQL Data
